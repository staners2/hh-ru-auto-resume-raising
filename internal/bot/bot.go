package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"hh-ru-auto-resume-raising/internal/hh"
	"hh-ru-auto-resume-raising/internal/scheduler"
	"hh-ru-auto-resume-raising/internal/storage"
	"hh-ru-auto-resume-raising/pkg/config"
)

type UserState struct {
	State string
	Data  map[string]string
}

type Bot struct {
	api        *tgbotapi.BotAPI
	config     *config.Config
	hhClient   *hh.Client
	scheduler  *scheduler.Scheduler
	storage    *storage.Storage
	userStates map[int64]*UserState
}

func New(cfg *config.Config, hhClient *hh.Client, sched *scheduler.Scheduler, store *storage.Storage) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &Bot{
		api:        api,
		config:     cfg,
		hhClient:   hhClient,
		scheduler:  sched,
		storage:    store,
		userStates: make(map[int64]*UserState),
	}, nil
}

func (b *Bot) Start() error {
	log.Printf("Authorized on account %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

// getAuthStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
func (b *Bot) getAuthStatus() string {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ
	_, err := b.hhClient.GetResumes()
	if err != nil {
		return "üîê –í–æ–π—Ç–∏ –≤ HeadHunter"
	}
	return "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if message.From.ID != b.config.AdminTG {
		return
	}

	userID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if state, exists := b.userStates[userID]; exists {
		b.handleState(message, state)
		return
	}

	// –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch message.Text {
	case "/start":
		b.sendMainMenu(message.Chat.ID)
	case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		b.handleSettingsMenu(message.Chat.ID)
	case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
		b.handleHelp(message.Chat.ID)
	case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
		b.handleToggleNotifications(message.Chat.ID)
	case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
		b.handleProfile(message.Chat.ID)
	case "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		b.sendMainMenu(message.Chat.ID)
	case "üìú –ú–æ–∏ —Ä–µ–∑—é–º–µ":
		b.handleListResumes(message.Chat.ID)
	case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
		b.handleShowSchedule(message.Chat.ID)
	case "‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º":
		b.handleAddResumeWithMessage(message)
	case "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
		b.handleDeleteResumeWithMessage(message)
	case "üîê –í–æ–π—Ç–∏ –≤ HeadHunter", "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω":
		b.handleAuth(message.Chat.ID)
	case "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
		b.handleUpdateResumes(message.Chat.ID)
	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	case "üîî –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
		b.handleToggleNotifications(message.Chat.ID)
	case "üìú –°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ":
		b.handleListResumes(message.Chat.ID)
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å":
		b.handleAddResumeWithMessage(message)
	case "‚ùå –£–¥–∞–ª–∏—Ç—å":
		b.handleDeleteResumeWithMessage(message)
	case "üöÄÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
		b.handleAuth(message.Chat.ID)
	case "üìù –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ":
		b.handleUpdateResumes(message.Chat.ID)
	default:
		b.sendMainMenu(message.Chat.ID)
	}
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	if callback.From.ID != b.config.AdminTG {
		return
	}

	switch {
	case callback.Data == "auth":
		b.handleAuth(callback.Message.Chat.ID)
	case callback.Data == "update_resumes":
		b.handleUpdateResumes(callback.Message.Chat.ID)
	case callback.Data == "schedule":
		b.handleShowSchedule(callback.Message.Chat.ID)
	case callback.Data == "toggle_notifications":
		b.handleToggleNotifications(callback.Message.Chat.ID)
	case callback.Data == "cancel_add_resume":
		b.handleCancelAddResume(callback)
	case callback.Data == "cancel_delete_resume":
		b.handleCancelDeleteResume(callback)
	case strings.HasPrefix(callback.Data, "add_resume:"):
		b.handleAddResumeCallback(callback)
	case strings.HasPrefix(callback.Data, "delete_resume:"):
		b.handleDeleteResumeCallback(callback)
	}

	b.api.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func (b *Bot) sendMainMenu(chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
	authStatus := b.getAuthStatus()
	
	var keyboard tgbotapi.ReplyKeyboardMarkup
	
	// –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	if authStatus == "üîê –í–æ–π—Ç–∏ –≤ HeadHunter" {
		keyboard = tgbotapi.NewReplyKeyboard(
			// –†—è–¥ 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üîê –í–æ–π—Ç–∏ –≤ HeadHunter"),
			),
			// –†—è–¥ 2: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
				tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			),
		)
	} else {
		// –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		keyboard = tgbotapi.NewReplyKeyboard(
			// –†—è–¥ 1: –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—É—Å–ø–µ—à–Ω–æ)
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
			),
			// –†—è–¥ 2: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∑—é–º–µ (–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üìú –ú–æ–∏ —Ä–µ–∑—é–º–µ"),
				tgbotapi.NewKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
			),
			// –†—è–¥ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–æ–º (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º"),
				tgbotapi.NewKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),
			),
			// –†—è–¥ 4: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–µ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ)
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
				tgbotapi.NewKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
			),
		)
	}
	
	keyboard.ResizeKeyboard = true

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := "üéØ <b>HeadHunter Auto Resume</b>\n\n"
	text += "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—ä–µ–º —Ä–µ–∑—é–º–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞\n"
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if authStatus == "üîê –í–æ–π—Ç–∏ –≤ HeadHunter" {
		text += "\nüöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n"
		text += "‚ö†Ô∏è <i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç HeadHunter</i>\n\n"
		text += "üìã <b>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:</b>\n"
		text += "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—é–º–µ\n"
		text += "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—ä–µ–º\n"
		text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
	} else {
		schedules := b.scheduler.GetAll()
		text += "\n‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</b>\n"
		
		if len(schedules) == 0 {
			text += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º –¥–ª—è –≤–∞—à–∏—Ö —Ä–µ–∑—é–º–µ</i>\n"
			text += "üìå –ù–∞–∂–º–∏—Ç–µ \"‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º\" –¥–ª—è –Ω–∞—á–∞–ª–∞"
		} else {
			text += fmt.Sprintf("üî• <i>–ê–∫—Ç–∏–≤–Ω–æ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–æ–≤: %d</i>\n", len(schedules))
			text += "üìà –í–∞—à–∏ —Ä–µ–∑—é–º–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è"
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		if b.scheduler.GetNotificationsEnabled() {
			text += "\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
		} else {
			text += "\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
		}
	}
	
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleAuth(chatID int64) {
	// –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
	if _, err := b.hhClient.GetResumes(); err == nil {
		text := "‚úÖ <b>–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</b>\n\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HeadHunter –∞–∫—Ç–∏–≤–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º —Ä–µ–∑—é–º–µ."
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	processingMsg := tgbotapi.NewMessage(chatID, "üîÑ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</b>\n\n–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ HeadHunter...")
	processingMsg.ParseMode = "HTML"
	b.api.Send(processingMsg)

	err := b.hhClient.Login()
	var text string
	if err == nil {
		text = "‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—é–º–µ\n‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º\n‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		if xsrf, hhtoken := b.hhClient.GetTokens(); xsrf != "" && hhtoken != "" {
			if saveErr := b.storage.SaveTokens(xsrf, hhtoken); saveErr != nil {
				log.Printf("Failed to save tokens: %v", saveErr)
			} else {
				log.Println("Tokens saved successfully")
			}
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
		b.sendMainMenu(chatID)
		return
	} else {
		text = "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n" + err.Error() + "\n\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleProfile(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	keyboard.ResizeKeyboard = true

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	authStatus := "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
	if _, err := b.hhClient.GetResumes(); err == nil {
		authStatus = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
	}

	text := "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
	text += fmt.Sprintf("üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <b>%s</b>\n", authStatus)
	text += fmt.Sprintf("üë®‚Äçüíº –õ–æ–≥–∏–Ω HeadHunter: <code>%s</code>\n", b.config.HHLogin)
	text += "üîí –ü–∞—Ä–æ–ª—å: <code>***</code>\n"
	
	proxyText := "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
	if b.config.Proxy != "None" && b.config.Proxy != "" {
		proxyText = b.config.Proxy
	}
	text += fmt.Sprintf("üåê –ü—Ä–æ–∫—Å–∏: <code>%s</code>\n", proxyText)
	
	notificationsText := "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
	if b.scheduler.GetNotificationsEnabled() {
		notificationsText = "–≤–∫–ª—é—á–µ–Ω—ã"
	}
	text += fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>%s</b>\n", notificationsText)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è—Ö
	schedules := b.scheduler.GetAll()
	text += fmt.Sprintf("üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: <b>%d</b>\n", len(schedules))
	
	text += "\nüí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª</i>"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleListResumes(chatID int64) {
	resumes, err := b.hhClient.GetResumes()
	if err != nil {
		text := "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ</b>\n\n"
		if _, authErr := b.hhClient.GetResumes(); authErr != nil {
			text += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ HeadHunter.\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîê –í–æ–π—Ç–∏ –≤ HeadHunter\""
		} else {
			text += err.Error() + "\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ \"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\""
		}
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	if len(resumes) == 0 {
		text := "üìù <b>–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n" +
			"–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ hh.ru –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ.\n\n" +
			"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\""
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
	schedules := b.scheduler.GetAll()
	
	text := fmt.Sprintf("üìú <b>–í–∞—à–∏ —Ä–µ–∑—é–º–µ (%d)</b>\n\n", len(resumes))
	for i, resume := range resumes {
		text += fmt.Sprintf("%d. <code>%s</code>", i+1, resume.Title)
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ
		if schedule, exists := schedules[resume.Title]; exists {
			text += fmt.Sprintf("\n   ‚è∞ –ê–≤—Ç–æ–ø–æ–¥—ä–µ–º: %02d:%02d", schedule.Hour, schedule.Minute)
			text += fmt.Sprintf("\n   üïê –°–ª–µ–¥—É—é—â–∏–π: %s", schedule.NextRun.Format("02.01 15:04"))
		} else {
			text += "\n   ‚ûï –ê–≤—Ç–æ–ø–æ–¥—ä–µ–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
		}
		
		if i < len(resumes)-1 {
			text += "\n\n"
		}
	}

	if len(schedules) == 0 {
		text += "\n\nüí° <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º\"</i>"
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleUpdateResumes(chatID int64) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	processingMsg := tgbotapi.NewMessage(chatID, "üîÑ <b>–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...</b>\n\n–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å HeadHunter...")
	processingMsg.ParseMode = "HTML"
	b.api.Send(processingMsg)

	resumes, err := b.hhClient.GetResumes()
	if err != nil {
		text := "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
		text += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
		text += "üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîê –í–æ–π—Ç–∏ –≤ HeadHunter\""
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	if len(resumes) > 0 {
		schedules := b.scheduler.GetAll()
		
		text := fmt.Sprintf("‚úÖ <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ: %d\n", len(resumes))
		
		activeSchedules := 0
		for _, resume := range resumes {
			if _, exists := schedules[resume.Title]; exists {
				activeSchedules++
			}
		}
		
		if activeSchedules > 0 {
			text += fmt.Sprintf("–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–æ–≤: %d\n\n", activeSchedules)
			text += "üìú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"üìú –ú–æ–∏ —Ä–µ–∑—é–º–µ\" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
		} else {
			text += "\nüí° <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º\"</i>"
		}
		
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
	} else {
		text := "‚ö†Ô∏è <b>–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
		text += "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ hh.ru –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.\n\n"
		text += "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ hh.ru ‚Üí –ú–æ–∏ —Ä–µ–∑—é–º–µ"
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
	}
}

func (b *Bot) handleAddResumeWithMessage(message *tgbotapi.Message) {
	b.handleAddResume(message.Chat.ID, message.MessageID)
}

func (b *Bot) handleDeleteResumeWithMessage(message *tgbotapi.Message) {
	b.handleDeleteResume(message.Chat.ID, message.MessageID)
}

func (b *Bot) handleAddResume(chatID int64, originalMessageID ...int) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
	resumes, err := b.hhClient.GetResumes()
	if err != nil || len(resumes) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ.")
		b.api.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
	schedules := b.scheduler.GetAll()

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—é–º–µ
	var keyboard [][]tgbotapi.InlineKeyboardButton
	
	for _, resume := range resumes {
		buttonText := resume.Title
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ
		if schedule, exists := schedules[resume.Title]; exists {
			buttonText += fmt.Sprintf(" ‚è∞ %02d:%02d", schedule.Hour, schedule.Minute)
		} else {
			buttonText += " ‚ûï"
		}
		
		button := tgbotapi.NewInlineKeyboardButtonData(
			buttonText,
			fmt.Sprintf("add_resume:%s", resume.ID),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
	cancelButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_add_resume")
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{cancelButton})

	markup := tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	
	text := "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞:</b>\n\n"
	text += "‚è∞ - —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞)\n"
	text += "‚ûï - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
	
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = markup
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
	sentMsg, _ := b.api.Send(msg)
	if b.userStates == nil {
		b.userStates = make(map[int64]*UserState)
	}
	
	data := map[string]string{
		"resume_list_message_id": fmt.Sprintf("%d", sentMsg.MessageID),
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
	if len(originalMessageID) > 0 {
		data["original_message_id"] = fmt.Sprintf("%d", originalMessageID[0])
	}
	
	b.userStates[chatID] = &UserState{
		State: "showing_resume_list",
		Data:  data,
	}
}

func (b *Bot) handleDeleteResume(chatID int64, originalMessageID ...int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—é–º–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
	schedules := b.scheduler.GetAll()
	if len(schedules) == 0 {
		text := "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ</b>\n\n"
		text += "–ù–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞.\n\n"
		text += "üí° –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º\""
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—é–º–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton
	
	for title, schedule := range schedules {
		buttonText := fmt.Sprintf("‚ùå %s ‚è∞ %02d:%02d", title, schedule.Hour, schedule.Minute)
		
		button := tgbotapi.NewInlineKeyboardButtonData(
			buttonText,
			fmt.Sprintf("delete_resume:%s", title),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
	cancelButton := tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", "cancel_delete_resume")
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{cancelButton})

	markup := tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	
	text := "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
	text += fmt.Sprintf("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–æ–≤: %d\n\n", len(schedules))
	text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞:"
	
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = markup
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
	sentMsg, _ := b.api.Send(msg)
	if b.userStates == nil {
		b.userStates = make(map[int64]*UserState)
	}
	
	data := map[string]string{
		"delete_list_message_id": fmt.Sprintf("%d", sentMsg.MessageID),
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
	if len(originalMessageID) > 0 {
		data["original_message_id"] = fmt.Sprintf("%d", originalMessageID[0])
	}
	
	b.userStates[chatID] = &UserState{
		State: "showing_delete_list",
		Data:  data,
	}
}

func (b *Bot) handleState(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID

	switch state.State {
	case "add_resume_time":
		b.handleAddResumeTime(message, state)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
		delete(b.userStates, userID)
		b.sendMainMenu(userID)
	}
}


func (b *Bot) handleAddResumeTime(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID
	timeStr := message.Text

	// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
	if !strings.Contains(timeStr, ":") {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	parts := strings.Split(timeStr, ":")
	if len(parts) != 2 {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	hour, err1 := strconv.Atoi(parts[0])
	minute, err2 := strconv.Atoi(parts[1])
	
	if err1 != nil || err2 != nil || hour < 0 || hour > 23 || minute < 0 || minute > 59 {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	title := state.Data["title"]
	resumeID := state.Data["resumeID"]
	
	b.scheduler.AddResume(title, resumeID, hour, minute)
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	if err := b.storage.SaveSchedule(b.scheduler.GetAll()); err != nil {
		log.Printf("Failed to save schedule: %v", err)
	} else {
		log.Println("Schedule saved successfully")
	}
	
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ–¥—ä–µ–º–∞
	nextTimes := []string{}
	baseTime := fmt.Sprintf("%02d:%02d", hour, minute)
	for i := 0; i < 4; i++ {
		nextHour := (hour + i*4) % 24
		nextTimes = append(nextTimes, fmt.Sprintf("%02d:%02d", nextHour, minute))
	}
	
	text := fmt.Sprintf("‚úÖ <b>–ê–≤—Ç–æ–ø–æ–¥—ä–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n")
	text += fmt.Sprintf("–†–µ–∑—é–º–µ: <code>%s</code>\n", title)
	text += fmt.Sprintf("‚è∞ –ü–µ—Ä–≤—ã–π –ø–æ–¥—ä–µ–º: <b>%s</b>\n\n", baseTime)
	text += "üîÑ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:</b>\n"
	for _, time := range nextTimes {
		text += fmt.Sprintf("‚Ä¢ %s\n", time)
	}
	text += "\nüí° <i>–ê–≤—Ç–æ–ø–æ–¥—ä–µ–º –∞–∫—Ç–∏–≤–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\"</i>"
	
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(b.userStates, userID)
}


func (b *Bot) handleShowSchedule(chatID int64) {
	schedules := b.scheduler.GetAll()
	if len(schedules) == 0 {
		text := "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ</b>\n\n"
		text += "–ê–≤—Ç–æ–ø–æ–¥—ä–µ–º —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
		text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"‚ûï –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –≤ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º."
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	notificationsStatus := "–≤–∫–ª—é—á–µ–Ω—ã"
	if !b.scheduler.GetNotificationsEnabled() {
		notificationsStatus = "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
	}

	text := fmt.Sprintf("üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞ (%d)</b>\n\n", len(schedules))
	text += fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s\n\n", notificationsStatus)
	
	i := 1
	for title, schedule := range schedules {
		text += fmt.Sprintf("<b>%d.</b> <code>%s</code>\n", i, title)
		text += fmt.Sprintf("   ‚è∞ –í—Ä–µ–º—è: <b>%02d:%02d</b>\n", schedule.Hour, schedule.Minute)
		text += fmt.Sprintf("   üïê –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: <i>%s</i>\n", 
			schedule.NextRun.Format("02.01 15:04"))
		
		if !schedule.LastRun.IsZero() {
			text += fmt.Sprintf("   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π: <i>%s</i>\n", 
				schedule.LastRun.Format("02.01 15:04"))
		}
		
		if i < len(schedules) {
			text += "\n"
		}
		i++
	}
	
	text += "\nüí° <i>–†–µ–∑—é–º–µ –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞</i>"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleToggleNotifications(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	keyboard.ResizeKeyboard = true

	enabled := b.scheduler.ToggleNotifications()
	var text string
	if enabled {
		text = "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
		text += "‚úÖ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞ —Ä–µ–∑—é–º–µ\n\n"
		text += "üì¨ <b>–í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ:</b>\n"
		text += "‚Ä¢ –£—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—ä–µ–º–µ —Ä–µ–∑—é–º–µ\n"
		text += "‚Ä¢ –û—à–∏–±–∫–∞—Ö –ø—Ä–∏ –ø–æ–¥—ä–µ–º–µ\n"
		text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
		text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
	} else {
		text = "üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
		text += "‚ùå –ê–≤—Ç–æ–ø–æ–¥—ä–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
		text += "üí° <i>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleCancelAddResume(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
	b.api.Request(deleteMsg)
	
	// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å
	if state, exists := b.userStates[chatID]; exists {
		if originalMsgID := state.Data["original_message_id"]; originalMsgID != "" {
			if msgID, err := strconv.Atoi(originalMsgID); err == nil {
				deleteOriginal := tgbotapi.NewDeleteMessage(chatID, msgID)
				b.api.Request(deleteOriginal)
			}
		}
	}
	
	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(b.userStates, chatID)
}

func (b *Bot) handleAddResumeCallback(callback *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–∑—é–º–µ –∏–∑ callback data
	resumeID := strings.TrimPrefix(callback.Data, "add_resume:")
	
	// –ù–∞–π–¥–µ–º —Ä–µ–∑—é–º–µ –ø–æ ID —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
	resumes, err := b.hhClient.GetResumes()
	if err != nil {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ")
		b.api.Send(msg)
		return
	}
	
	var resumeTitle string
	for _, resume := range resumes {
		if resume.ID == resumeID {
			resumeTitle = resume.Title
			break
		}
	}
	
	if resumeTitle == "" {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		b.api.Send(msg)
		return
	}
	
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
	b.api.Request(deleteMsg)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
	b.userStates[callback.Message.Chat.ID] = &UserState{
		State: "add_resume_time",
		Data: map[string]string{
			"title":    resumeTitle,
			"resumeID": resumeID,
		},
	}
	
	text := fmt.Sprintf("‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞</b>\n\n")
	text += fmt.Sprintf("–†–µ–∑—é–º–µ: <code>%s</code>\n\n", resumeTitle)
	text += "üìã <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—ä–µ–º–∞</b> (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)\n"
	text += "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>14:30</code>\n\n"
	text += "üîÑ –î–∞–ª–µ–µ —Ä–µ–∑—é–º–µ –±—É–¥–µ—Ç –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è <b>–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞</b>\n"
	text += "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: 09:00 (–ø–æ–¥—ä–µ–º—ã –≤ 9:00, 13:00, 17:00, 21:00)"
	
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleSettingsMenu(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		// –†—è–¥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
			tgbotapi.NewKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
		),
		// –†—è–¥ 2: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
		),
		// –†—è–¥ 3: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	keyboard.ResizeKeyboard = true

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	notificationsStatus := "–≤–∫–ª—é—á–µ–Ω—ã"
	if !b.scheduler.GetNotificationsEnabled() {
		notificationsStatus = "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
	}
	
	schedules := b.scheduler.GetAll()
	
	text := "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
	text += fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>%s</b>\n", notificationsStatus)
	text += fmt.Sprintf("üìã –†–µ–∑—é–º–µ –≤ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–µ: <b>%d</b>\n", len(schedules))
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	if _, err := b.hhClient.GetResumes(); err == nil {
		text += "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: <b>‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</b>\n"
	} else {
		text += "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: <b>‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è</b>\n"
	}
	
	text += "\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleHelp(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	keyboard.ResizeKeyboard = true

	text := "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
	text += "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
	text += "‚Ä¢ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b> - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É HeadHunter\n"
	text += "‚Ä¢ <b>–ú–æ–∏ —Ä–µ–∑—é–º–µ</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–µ–∑—é–º–µ\n"
	text += "‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—ä–µ–º</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—ä–µ–º –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞\n"
	text += "‚Ä¢ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–¥—ä–µ–º–∞ —Ä–µ–∑—é–º–µ\n\n"
	
	text += "‚è∞ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º:</b>\n"
	text += "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞\n"
	text += "2. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—ä–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)\n"
	text += "3. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞\n"
	text += "   –ü—Ä–∏–º–µ—Ä: 09:00 ‚Üí 13:00 ‚Üí 17:00 ‚Üí 21:00\n\n"
	
	text += "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
	text += "–ü–æ–ª—É—á–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞\n\n"
	
	text += "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
	text += "‚Ä¢ –†–µ–∑—é–º–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 4 —á–∞—Å–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ HH)\n"
	text += "‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
	text += "‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 24/7"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleDeleteResumeCallback(callback *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏–∑ callback data
	resumeTitle := strings.TrimPrefix(callback.Data, "delete_resume:")
	
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
	b.api.Request(deleteMsg)
	
	// –£–¥–∞–ª—è–µ–º —Ä–µ–∑—é–º–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	removed := b.scheduler.RemoveResume(resumeTitle)
	
	var text string
	if removed {
		text = "‚úÖ <b>–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–≤—Ç–æ–ø–æ–¥—ä–µ–º–∞</b>\n\n"
		text += fmt.Sprintf("–†–µ–∑—é–º–µ: <code>%s</code>\n\n", resumeTitle)
		text += "–ê–≤—Ç–æ–ø–æ–¥—ä–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ –æ—Ç–∫–ª—é—á–µ–Ω.\n"
		text += "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
		if err := b.storage.SaveSchedule(b.scheduler.GetAll()); err != nil {
			log.Printf("Failed to save schedule: %v", err)
		} else {
			log.Println("Schedule saved successfully after deletion")
		}
	} else {
		text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
		text += fmt.Sprintf("–†–µ–∑—é–º–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.", resumeTitle)
	}

	// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" –µ—Å–ª–∏ –µ—Å—Ç—å
	chatID := callback.Message.Chat.ID
	if state, exists := b.userStates[chatID]; exists {
		if originalMsgID := state.Data["original_message_id"]; originalMsgID != "" {
			if msgID, err := strconv.Atoi(originalMsgID); err == nil {
				deleteOriginal := tgbotapi.NewDeleteMessage(chatID, msgID)
				b.api.Request(deleteOriginal)
			}
		}
	}
	
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
	
	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(b.userStates, chatID)
}

func (b *Bot) handleCancelDeleteResume(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
	b.api.Request(deleteMsg)
	
	// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" –µ—Å–ª–∏ –µ—Å—Ç—å
	if state, exists := b.userStates[chatID]; exists {
		if originalMsgID := state.Data["original_message_id"]; originalMsgID != "" {
			if msgID, err := strconv.Atoi(originalMsgID); err == nil {
				deleteOriginal := tgbotapi.NewDeleteMessage(chatID, msgID)
				b.api.Request(deleteOriginal)
			}
		}
	}
	
	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(b.userStates, chatID)
}

func (b *Bot) SendNotification(message string) {
	if b.config.AdminTG != 0 {
		msg := tgbotapi.NewMessage(b.config.AdminTG, message)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
	}
}