package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"hh-ru-auto-resume-raising/internal/hh"
	"hh-ru-auto-resume-raising/internal/scheduler"
	"hh-ru-auto-resume-raising/pkg/config"
)

type UserState struct {
	State string
	Data  map[string]string
}

type Bot struct {
	api        *tgbotapi.BotAPI
	config     *config.Config
	hhClient   *hh.Client
	scheduler  *scheduler.Scheduler
	userStates map[int64]*UserState
}

func New(cfg *config.Config, hhClient *hh.Client, sched *scheduler.Scheduler) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &Bot{
		api:        api,
		config:     cfg,
		hhClient:   hhClient,
		scheduler:  sched,
		userStates: make(map[int64]*UserState),
	}, nil
}

func (b *Bot) Start() error {
	log.Printf("Authorized on account %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if message.From.ID != b.config.AdminTG {
		return
	}

	userID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if state, exists := b.userStates[userID]; exists {
		b.handleState(message, state)
		return
	}

	// –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch message.Text {
	case "/start":
		b.sendMainMenu(message.Chat.ID)
	case "‚öô –ü—Ä–æ—Ñ–∏–ª—å":
		b.handleProfile(message.Chat.ID)
	case "üîî –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
		b.handleToggleNotifications(message.Chat.ID)
	case "üìú –°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ":
		b.handleListResumes(message.Chat.ID)
	case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
		b.handleShowSchedule(message.Chat.ID)
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å":
		b.handleAddResume(message.Chat.ID)
	case "‚ùå –£–¥–∞–ª–∏—Ç—å":
		b.handleDeleteResume(message.Chat.ID)
	case "üöÄÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
		b.handleAuth(message.Chat.ID)
	case "üìù –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ":
		b.handleUpdateResumes(message.Chat.ID)
	default:
		b.sendMainMenu(message.Chat.ID)
	}
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	if callback.From.ID != b.config.AdminTG {
		return
	}

	switch callback.Data {
	case "auth":
		b.handleAuth(callback.Message.Chat.ID)
	case "update_resumes":
		b.handleUpdateResumes(callback.Message.Chat.ID)
	case "schedule":
		b.handleShowSchedule(callback.Message.Chat.ID)
	case "toggle_notifications":
		b.handleToggleNotifications(callback.Message.Chat.ID)
	}

	b.api.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func (b *Bot) sendMainMenu(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚öô –ü—Ä–æ—Ñ–∏–ª—å"),
			tgbotapi.NewKeyboardButton("üîî –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìú –°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ"),
			tgbotapi.NewKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üöÄÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üìù –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ"),
		),
	)
	keyboard.ResizeKeyboard = true

	text := "HeadHunter Resume\n–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—ä–µ–º–∞ —Ä–µ–∑—é–º–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞."
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleAuth(chatID int64) {
	err := b.hhClient.Login()
	var text string
	if err == nil {
		text = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
	} else {
		text = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + err.Error()
	}

	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) handleProfile(chatID int64) {
	text := fmt.Sprintf("<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>\n"+
		"–õ–æ–≥–∏–Ω: %s\n"+
		"–ü–∞—Ä–æ–ª—å: %s\n"+
		"–ü—Ä–æ–∫—Å–∏: %s\n"+
		"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s",
		b.config.HHLogin,
		"***",
		func() string {
			if b.config.Proxy == "None" || b.config.Proxy == "" {
				return "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
			}
			return b.config.Proxy
		}(),
		func() string {
			if b.scheduler.GetNotificationsEnabled() {
				return "–≤–∫–ª—é—á–µ–Ω—ã"
			}
			return "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
		}())

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleListResumes(chatID int64) {
	resumes, err := b.hhClient.GetResumes()
	if err != nil || len(resumes) == 0 {
		text := "<b>–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n" +
			"1) –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ.\n" +
			"2) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ hh.ru"
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	text := "<b>–í–∞—à–∏ —Ä–µ–∑—é–º–µ</b>"
	for _, resume := range resumes {
		text += fmt.Sprintf("\n\n<code>%s</code>", resume.Title)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleUpdateResumes(chatID int64) {
	resumes, err := b.hhClient.GetResumes()
	if err != nil {
		text := "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		return
	}

	if len(resumes) > 0 {
		text := "<b>–í–∞—à–∏ —Ä–µ–∑—é–º–µ</b>"
		for _, resume := range resumes {
			text += fmt.Sprintf("\n\n<code>%s</code>", resume.Title)
		}
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
	} else {
		text := "–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
		msg := tgbotapi.NewMessage(chatID, text)
		b.api.Send(msg)
	}
}

func (b *Bot) handleAddResume(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
	resumes, err := b.hhClient.GetResumes()
	if err != nil || len(resumes) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ.")
		b.api.Send(msg)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
	b.userStates[chatID] = &UserState{
		State: "add_resume_title",
		Data:  make(map[string]string),
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å.")
	b.api.Send(msg)
}

func (b *Bot) handleDeleteResume(chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—é–º–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
	schedules := b.scheduler.GetAll()
	if len(schedules) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç —Ä–µ–∑—é–º–µ")
		b.api.Send(msg)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	b.userStates[chatID] = &UserState{
		State: "delete_resume_title",
		Data:  make(map[string]string),
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
	b.api.Send(msg)
}

func (b *Bot) handleState(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID

	switch state.State {
	case "add_resume_title":
		b.handleAddResumeTitle(message, state)
	case "add_resume_time":
		b.handleAddResumeTime(message, state)
	case "delete_resume_title":
		b.handleDeleteResumeTitle(message, state)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
		delete(b.userStates, userID)
		b.sendMainMenu(userID)
	}
}

func (b *Bot) handleAddResumeTitle(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID
	resumeTitle := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ —Ä–µ–∑—é–º–µ
	resumes, err := b.hhClient.GetResumes()
	if err != nil {
		delete(b.userStates, userID)
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ")
		b.api.Send(msg)
		return
	}

	found := false
	var resumeID string
	for _, resume := range resumes {
		if resume.Title == resumeTitle {
			found = true
			resumeID = resume.ID
			break
		}
	}

	if !found {
		delete(b.userStates, userID)
		msg := tgbotapi.NewMessage(userID, "–†–µ–∑—é–º–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		b.api.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
	state.Data["title"] = resumeTitle
	state.Data["resumeID"] = resumeID
	state.State = "add_resume_time"

	text := "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–Ω—è—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:00 –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å " +
		"2:00 6:00 10:00 <code>14:00</code> 18:00 22:00"
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleAddResumeTime(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID
	timeStr := message.Text

	// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
	if !strings.Contains(timeStr, ":") {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	parts := strings.Split(timeStr, ":")
	if len(parts) != 2 {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	hour, err1 := strconv.Atoi(parts[0])
	minute, err2 := strconv.Atoi(parts[1])
	
	if err1 != nil || err2 != nil || hour < 0 || hour > 23 || minute < 0 || minute > 59 {
		msg := tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 10:30.")
		b.api.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	title := state.Data["title"]
	resumeID := state.Data["resumeID"]
	
	b.scheduler.AddResume(title, resumeID, hour, minute)
	
	text := fmt.Sprintf("<b>–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n%s\n%s", title, timeStr)
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(b.userStates, userID)
}

func (b *Bot) handleDeleteResumeTitle(message *tgbotapi.Message, state *UserState) {
	userID := message.Chat.ID
	resumeTitle := message.Text

	// –£–¥–∞–ª—è–µ–º —Ä–µ–∑—é–º–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	removed := b.scheduler.RemoveResume(resumeTitle)
	
	var text string
	if removed {
		text = fmt.Sprintf("<b>–£–¥–∞–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ–∑—é–º–µ</b>\n%s", resumeTitle)
	} else {
		text = "–†–µ–∑—é–º–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
	}

	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "HTML"
	b.api.Send(msg)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(b.userStates, userID)
}

func (b *Bot) handleShowSchedule(chatID int64) {
	schedules := b.scheduler.GetAll()
	if len(schedules) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ")
		b.api.Send(msg)
		return
	}

	text := "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
	for title, schedule := range schedules {
		text += fmt.Sprintf("üìÑ %s\n", title)
		text += fmt.Sprintf("‚è∞ %02d:%02d\n", schedule.Hour, schedule.Minute)
		text += fmt.Sprintf("üïê –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: %s\n\n",
			schedule.NextRun.Format("02.01.2006 15:04"))
	}

	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) handleToggleNotifications(chatID int64) {
	enabled := b.scheduler.ToggleNotifications()
	var text string
	if enabled {
		text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
	} else {
		text = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
	}

	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) SendNotification(message string) {
	if b.config.AdminTG != 0 {
		msg := tgbotapi.NewMessage(b.config.AdminTG, message)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
	}
}